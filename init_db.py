import oracledb
import sys

# --- Database Credentials ---
# IMPORTANT: Replace with your actual credentials and connect string.
DB_USER = "ADMIN"
DB_PASSWORD = "Isekai1012005"
CONNECT_STRING = '(description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1521)(host=adb.ap-singapore-1.oraclecloud.com))(connect_data=(service_name=g4e0da5e96784db_dt6psk6oit42okbb_high.adb.oraclecloud.com))(security=(ssl_server_dn_match=yes)))'


def initialize_database():
    """
    Connects to the Oracle database to drop existing tables, create a new schema,
    and populate it with sample data in a single run.
    """
    try:
        # The 'with' statement ensures the connection is automatically closed
        # even if errors occur.
        print("Connecting to the database...")
        with oracledb.connect(user=DB_USER, password=DB_PASSWORD, dsn=CONNECT_STRING) as connection:
            print("Connected to the database.")
            # The 'with' statement ensures the cursor is closed automatically.
            with connection.cursor() as cur:
                print("Successfully connected to Oracle Database.")

                # --- 1. Drop Existing Tables (Teardown) ---
                print("\nDropping existing tables...")
                for tbl in ["borrow_records", "books", "users"]:
                    try:
                        cur.execute(f"DROP TABLE {tbl} CASCADE CONSTRAINTS")
                        print(f"  - Table '{tbl}' dropped.")
                    except oracledb.DatabaseError as e:
                        # ORA-00942: table or view does not exist. This is fine.
                        if "ORA-00942" in str(e):
                            print(f"  - Table '{tbl}' does not exist, skipping drop.")
                        else:
                            raise  # Re-raise any other database errors.

                # --- 2. Create New Tables (Schema Setup) ---
                print("\nCreating 'users' table...")
                cur.execute("""
                CREATE TABLE users (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name VARCHAR2(100) UNIQUE NOT NULL
                )
                """)

                print("Creating 'books' table...")
                cur.execute("""
                CREATE TABLE books (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    title VARCHAR2(200) NOT NULL,
                    author VARCHAR2(100) NOT NULL,
                    quantity NUMBER CHECK (quantity >= 0)
                )
                """)

                print("Creating 'borrow_records' table...")
                cur.execute("""
                CREATE TABLE borrow_records (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                    book_id NUMBER NOT NULL REFERENCES books(id) ON DELETE CASCADE,
                    borrow_date TIMESTAMP NOT NULL,
                    return_date TIMESTAMP
                )
                """)
                print("All tables created successfully.")

                # --- 3. Insert Sample Data (Seeding) ---
                print("\nInserting sample users...")
                sample_users = [('Alice',), ('Bob',), ('Charlie',)]
                cur.executemany("INSERT INTO users (name) VALUES (:1)", sample_users)
                print(f"  - {cur.rowcount} users inserted.")

                print("Inserting sample books...")
                sample_books = [
                    ('The Hobbit', 'J.R.R. Tolkien', 5),
                    ('1984', 'George Orwell', 3),
                    ('Dune', 'Frank Herbert', 0),
                    ("The Hitchhiker's Guide to the Galaxy", 'Douglas Adams', 10)
                ]
                cur.executemany(
                    "INSERT INTO books (title, author, quantity) VALUES (:1, :2, :3)",
                    sample_books
                )
                print(f"  - {cur.rowcount} books inserted.")

                print("Inserting sample borrow records...")
                cur.executemany("""
                INSERT INTO borrow_records (user_id, book_id, borrow_date, return_date)
                    VALUES (:1, :2,
                 TO_TIMESTAMP(:3, 'YYYY-MM-DD HH24:MI:SS'),
                CASE WHEN :4 IS NULL THEN NULL
                 ELSE TO_TIMESTAMP(:5, 'YYYY-MM-DD HH24:MI:SS') END)
                """, [
                (1, 1, '2025-09-01 10:00:00', '2025-09-15 14:30:00', '2025-09-15 14:30:00'),
                (2, 2, '2025-09-05 11:20:00', None, None),
                (1, 4, '2025-09-20 16:00:00', None, None),
                ])

                # --- 4. Commit Transaction ---
                connection.commit()
                print("\nDatabase initialization complete. Changes have been committed.")

    except oracledb.Error as e:
        print(f"Database error occurred: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}", file=sys.stderr)
        sys.exit(1)


# --- Script Execution ---
if __name__ == "__main__":
    # Follow driver installation and setup instructions here:
    # https://www.oracle.com/database/technologies/appdev/python/quickstartpython.html

    # If your environment requires Oracle Thick mode, uncomment the following line.
    # It must be called before making any connections.
    # oracledb.init_oracle_client()

    initialize_database()
